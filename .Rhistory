# Save as super high-res PNG (e.g., 8000px wide for any print/slide/zoom)
rsvg_png(charToRaw(svg_txt),
file   = "numbat_flowchart_ultra.png",
width  = 8000,
height = 2000)
# Also, save a vector version (never pixelates)
rsvg_pdf(charToRaw(svg_txt), file = "numbat_flowchart_ultra.pdf", width=8000, height=2000)
writeLines(svg_txt, "numbat_flowchart_ultra.svg")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
dot <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"Raw scRNA-seq BAM files\"]
B [label = \"Raw scATAC-seq BAM files\"]
C [shape=diamond, label = \"Pileup Allele Counts for RNA\"]
D [shape=diamond, label = \"Pileup Allele Counts for ATAC\"]
E [label = \"Combine Allele Counts\"]
F [shape=diamond, label = \"Population-based Haplotype Phasing\\n(Eagle2)\"]
G [label = \"Single-Cell Phased Genotype Data\\n(TSV.GZ)\"]
H [label = \"Numbat-multiome CNV Inference\"]
A -> C
B -> D
C -> E
D -> E
E -> F
F -> G
G -> H
}
"
g       <- grViz(dot)
svg_txt <- export_svg(g)
# Save as tall, crisp PNG (e.g. 2000x5000px for print/slide)
rsvg_png(charToRaw(svg_txt),
file   = "numbat_flowchart_vertical.png",
width  = 2000,
height = 5000)
# And a true vector PDF
rsvg_pdf(charToRaw(svg_txt),
file   = "numbat_flowchart_vertical.pdf",
width  = 2000,
height = 5000)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
dot <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"Phased SNP Genotype Data\"]
B [shape=diamond, label = \"Extract Paternal\\nAllele Counts (Yj)\"]
C [label = \"Gene Expression\\nCount Matrix\"]
D [shape=diamond, label = \"Extract Gene Expression\\nCounts (Xi)\"]
E [label = \"Beta-Binomial Model\"]
F [label = \"Poisson Log-Normal Model\"]
G [shape=diamond, label = \"Joint Hidden Markov\\nModel (HMM)\"]
H [shape=diamond, label = \"Viterbi Algorithm\"]
I [label = \"Allele-Specific Copy\\nNumber Inference\"]
J [label = \"Iterative Subclonal\\nPhylogeny Reconstruction\"]
K [label = \"Final Inferred CNVs and\\nClonal Architecture\"]
A -> B
C -> D
B -> E [label = \"Allelic Imbalance\\nSignal\"]
D -> F [label = \"Molecule Abundance\\nSignal\"]
E -> G [label = \"Likelihood\\np(Yj|CNV state)\"]
F -> G [label = \"Likelihood\\np(Xi|CNV state)\"]
G -> H [label = \"15 Hidden States\\n(CNV Configurations)\"]
G -> H [label = \"Transition Probabilities\\n(t, ps)\"]
H -> I [label = \"Most Probable\\nCNV State\"]
I -> J
J -> K
}
"
g       <- grViz(dot)
svg_txt <- export_svg(g)
# Save as tall, crisp PNG (e.g. 2000x5000px for print/slide)
rsvg_png(charToRaw(svg_txt),
file   = "CNV_workflow_diagram.png",
width  = 2000,
height = 5000)
# And a true vector PDF
rsvg_pdf(charToRaw(svg_txt),
file   = "CNV_workflow_diagram.pdf",
width  = 2000,
height = 5000)
# Display the diagram in R
print(g)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# ============================================================================
# SECTION 1: CNV Inference Workflow
# ============================================================================
cat("Generating CNV Inference Workflow Diagram...\n")
dot_cnv <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"Phased SNP Genotype Data\"]
B [shape=diamond, label = \"Extract Paternal\\nAllele Counts (Yj)\"]
C [label = \"Gene Expression\\nCount Matrix\"]
D [shape=diamond, label = \"Extract Gene Expression\\nCounts (Xi)\"]
E [label = \"Beta-Binomial Model\"]
F [label = \"Poisson Log-Normal Model\"]
G [shape=diamond, label = \"Joint Hidden Markov\\nModel (HMM)\"]
H [shape=diamond, label = \"Viterbi Algorithm\"]
I [label = \"Allele-Specific Copy\\nNumber Inference\"]
J [label = \"Iterative Subclonal\\nPhylogeny Reconstruction\"]
K [label = \"Final Inferred CNVs and\\nClonal Architecture\"]
A -> B
C -> D
B -> E [label = \"Allelic Imbalance\\nSignal\"]
D -> F [label = \"Molecule Abundance\\nSignal\"]
E -> G [label = \"Likelihood\\np(Yj|CNV state)\"]
F -> G [label = \"Likelihood\\np(Xi|CNV state)\"]
G -> H [label = \"15 Hidden States\\n(CNV Configurations)\"]
G -> H [label = \"Transition Probabilities\\n(t, ps)\"]
H -> I [label = \"Most Probable\\nCNV State\"]
I -> J
J -> K
}
"
g_cnv       <- grViz(dot_cnv)
svg_txt_cnv <- export_svg(g_cnv)
# Save CNV workflow as tall, crisp PNG and PDF
rsvg_png(charToRaw(svg_txt_cnv),
file   = "CNV_workflow_diagram.png",
width  = 2000,
height = 5000)
rsvg_pdf(charToRaw(svg_txt_cnv),
file   = "CNV_workflow_diagram.pdf",
width  = 2000,
height = 5000)
# Display the CNV diagram
print(g_cnv)
# ============================================================================
# SECTION 2: Metacell Analysis Workflow
# ============================================================================
cat("\nGenerating Metacell Analysis Workflow Diagram...\n")
dot_metacell <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"ScRNA-seq Data\\n(Cell-by-Gene)\"]
B [shape=diamond, label = \"Random Sample\\nCells by Clone\"]
C [label = \"ScATAC-seq Data\\n(Cell-by-Fragment/Peak)\"]
D [shape=diamond, label = \"Random Sample\\nCells by Clone\"]
E [label = \"Aggregate Counts\\nwithin Clones\"]
F [label = \"Aggregate Counts\\nwithin Clones\"]
G [shape=diamond, label = \"Vertically Concatenate\\nMetacell Matrices\"]
H [label = \"Dimension Reduction\\n(PCA)\"]
I [label = \"UMAP Embedding\"]
J [label = \"Integrated scRNA/scATAC\\nAnalysis per Clone\"]
A -> B [label = \"Identified Clones\"]
C -> D [label = \"Identified Clones\"]
B -> E [label = \"Sampled RNA Cells\"]
D -> F [label = \"Sampled ATAC Cells\"]
E -> G [label = \"RNA Metacells\"]
F -> G [label = \"ATAC Metacells\"]
G -> H [label = \"Combined Metacell\\nMatrix\"]
H -> I [label = \"Reduced Dimensions\"]
I -> J
}
"
g_metacell       <- grViz(dot_metacell)
svg_txt_metacell <- export_svg(g_metacell)
# Save metacell workflow as tall, crisp PNG and PDF
rsvg_png(charToRaw(svg_txt_metacell),
file   = "metacell_analysis_diagram.png",
width  = 2000,
height = 5000)
rsvg_pdf(charToRaw(svg_txt_metacell),
file   = "metacell_analysis_diagram.pdf",
width  = 2000,
height = 5000)
# Display the metacell diagram
print(g_metacell)
cat("\nBoth diagrams have been generated and saved!\n")
cat("- CNV workflow: CNV_workflow_diagram.png/pdf\n")
cat("- Metacell analysis: metacell_analysis_diagram.png/pdf\n")
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
# ============================================================================
# SECTION 1: CNV Inference Workflow
# ============================================================================
cat("Generating CNV Inference Workflow Diagram...\n")
dot_cnv <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"Phased SNP Genotype Data\"]
B [shape=diamond, label = \"Extract Paternal\\nAllele Counts (Yj)\"]
C [label = \"Gene Expression\\nCount Matrix\"]
D [shape=diamond, label = \"Extract Gene Expression\\nCounts (Xi)\"]
E [label = \"Beta-Binomial Model\"]
F [label = \"Poisson Log-Normal Model\"]
G [shape=diamond, label = \"Joint Hidden Markov\\nModel (HMM)\"]
H [shape=diamond, label = \"Viterbi Algorithm\"]
I [label = \"Allele-Specific Copy\\nNumber Inference\"]
J [label = \"Iterative Subclonal\\nPhylogeny Reconstruction\"]
K [label = \"Final Inferred CNVs and\\nClonal Architecture\"]
A -> B
C -> D
B -> E [label = \"Allelic Imbalance\\nSignal\"]
D -> F [label = \"Molecule Abundance\\nSignal\"]
E -> G [label = \"Likelihood\\np(Yj|CNV state)\"]
F -> G [label = \"Likelihood\\np(Xi|CNV state)\"]
G -> H [label = \"15 Hidden States\\n(CNV Configurations)\"]
G -> H [label = \"Transition Probabilities\\n(t, ps)\"]
H -> I [label = \"Most Probable\\nCNV State\"]
I -> J
J -> K
}
"
g_cnv       <- grViz(dot_cnv)
svg_txt_cnv <- export_svg(g_cnv)
# Save CNV workflow as tall, crisp PNG and PDF
rsvg_png(charToRaw(svg_txt_cnv),
file   = "CNV_workflow_diagram.png",
width  = 2000,
height = 5000)
rsvg_pdf(charToRaw(svg_txt_cnv),
file   = "CNV_workflow_diagram.pdf",
width  = 2000,
height = 5000)
# Display the CNV diagram
print(g_cnv)
# ============================================================================
# SECTION 2: Metacell Analysis Workflow
# ============================================================================
cat("\nGenerating Metacell Analysis Workflow Diagram...\n")
dot_metacell <- "
digraph {
rankdir = TB                   // top-to-bottom flow
nodesep=0.05; ranksep=0.15;    // ultra tight
node [shape=box, style=solid, fontsize=18, width=2.2, height=0.5, margin=\"0.03,0.02\", penwidth=1.4, fontname=\"Arial\"]
edge [penwidth=1.2, arrowsize=1]
A [label = \"ScRNA-seq Data\\n(Cell-by-Gene)\"]
B [label = \"ScATAC-seq Data\\n(Cell-by-Fragment/Peak)\"]
C [shape=diamond, label = \"Group by Annotation\\n(e.g., Clone/Line)\"]
D [shape=diamond, label = \"Random Sample 5 Cells\\nper Group per Modality\"]
E [label = \"Average Counts\\nwithin Sampled Cells\"]
F [label = \"Average Counts\\nwithin Sampled Cells\"]
G [shape=diamond, label = \"Horizontal Concatenate\\nRNA + ATAC Metacells\"]
H [label = \"Pseudo Multi-ome\\nMetacell Matrix\"]
I [label = \"Dimension Reduction\\n(PCA - 50 PCs)\"]
J [label = \"UMAP Embedding\"]
K [label = \"Integrated scRNA/scATAC\\nAnalysis per Clone\"]
A -> C [label = \"Cell Annotations\"]
B -> C [label = \"Cell Annotations\"]
C -> D [label = \"Common Groups\"]
D -> E [label = \"Sampled RNA Cells\"]
D -> F [label = \"Sampled ATAC Cells\"]
E -> G [label = \"RNA Metacells\"]
F -> G [label = \"ATAC Metacells\"]
G -> H [label = \"Combined Matrix\"]
H -> I [label = \"Feature Matrix\"]
I -> J [label = \"Reduced Dimensions\"]
J -> K
}
"
g_metacell       <- grViz(dot_metacell)
svg_txt_metacell <- export_svg(g_metacell)
# Save metacell workflow as tall, crisp PNG and PDF
rsvg_png(charToRaw(svg_txt_metacell),
file   = "metacell_analysis_diagram.png",
width  = 2000,
height = 5000)
rsvg_pdf(charToRaw(svg_txt_metacell),
file   = "metacell_analysis_diagram.pdf",
width  = 2000,
height = 5000)
# Display the metacell diagram
print(g_metacell)
cat("\nBoth diagrams have been generated and saved!\n")
cat("- CNV workflow: CNV_workflow_diagram.png/pdf\n")
cat("- Metacell analysis: metacell_analysis_diagram.png/pdf\n")
print(g_metacell)
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "binsize",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
# ============================================================================
# Bin Size vs Runtime Analysis
# ============================================================================
# Load runtime data
runtime_data <- fread("binsize/runtime.tsv") %>%
mutate(bin_size_kb = as.numeric(size_kb),
runtime_minutes = as.numeric(minutes))
# Create scatterplot with connected lines
runtime_plot <- ggplot(runtime_data, aes(x = bin_size_kb, y = runtime_minutes)) +
geom_point(size = 4, color = "darkred", alpha = 0.8) +
geom_line(color = "darkred", linewidth = 1.2, alpha = 0.7) +
geom_text(aes(label = paste0(bin_size_kb, "kb")),
vjust = -0.8, hjust = 0.5, size = 3, fontface = "bold") +
scale_x_log10(breaks = c(50, 80, 100, 200, 300, 500),
labels = c("50kb", "80kb", "100kb", "200kb", "300kb", "500kb")) +
scale_y_continuous(limits = c(0, max(runtime_data$runtime_minutes) * 1.1)) +
labs(title = "Bin Size vs Runtime Trade-off",
subtitle = "Computational cost decreases with larger bin sizes",
x = "Bin Size (log scale)",
y = "Runtime (minutes)") +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray40"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
panel.grid.minor = element_blank())
# Calculate and display key statistics
cat("=== Bin Size vs Runtime Analysis ===\n")
cat("Runtime scaling factor (500kb vs 50kb):",
round(runtime_data$runtime_minutes[runtime_data$bin_size_kb == 500] /
runtime_data$runtime_minutes[runtime_data$bin_size_kb == 50], 2), "x faster\n")
cat("Recommended stable range: 100-200kb (runtime: 11-15 minutes)\n")
cat("High-resolution option: 50kb (runtime: 21 minutes)\n")
cat("Fast screening option: 300-500kb (runtime: 6-9 minutes)\n\n")
# Display the runtime plot
print(runtime_plot)
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "binsize",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
# Save karyotype plot as high-resolution PNG
ggsave("_pabel/karyotype_chr7_binsize_comparison.png",
plot = karyo_cnv,
width = 12, height = 8,
dpi = 300,
units = "in")
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "binsize",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
# Save karyotype plot as high-resolution PNG
ggsave("_pabel/karyotype_chr7_binsize_comparison.png",
plot = karyo_cnv,
width = 12, height = 8,
dpi = 300,
units = "in")
ggsave("_panel/karyotype_chr7_binsize_comparison.png",
plot = karyo_cnv,
width = 12, height = 8,
dpi = 300,
units = "in")
