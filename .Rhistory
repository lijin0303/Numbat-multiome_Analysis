eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
segD
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "benchmark",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "benchmark",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "benchmark",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
bin_counts <- readRDS("benchmark/patA_bin200kb_inputs/bin200kb_comb_bincnt.rds")
write_csv(as.data.frame(bin_counts), "bin_counts_for_python.csv")
# Load required library
library(readr)
# 1. Read the bin count matrix from RDS
bin_counts <- readRDS("benchmark/patA_bin200kb_inputs/bin200kb_comb_bincnt.rds")
write_csv(as.data.frame(bin_counts), "congasp/bin_counts_python.csv")
# 1. Read the bin count matrix from RDS
bin_counts <- readRDS("benchmark/patA_bin200kb_inputs/bin200kb_comb_bincnt.rds")  # replace with your file name
bin_counts_dense <- as.matrix(bin_counts)
bin_counts_df <- as.data.frame(bin_counts_dense)
# 3. Write the count matrix as CSV (rows = bins, columns = cells)
write_csv(bin_counts_df, "bin_counts_for_python.csv")
getwd()
# 3. Write the count matrix as CSV (rows = bins, columns = cells)
write_csv(bin_counts_df, "congasp/bin_counts_for_python.csv")
# 4. Write the bin/segment names (if rownames are bins)
if (!is.null(rownames(bin_counts))) {
bins <- rownames(bin_counts)
} else {
bins <- paste0("bin", seq_len(nrow(bin_counts)))
}
write_csv(data.frame(bin=bins), "congasp/bin_segments.csv")
# 5. Write the ploidy/prior file (all 2s, one per bin)
ploidy <- rep(2, length(bins))
write_csv(data.frame(bin=bins, ploidy=ploidy), "congasp/bin_ploidy.csv")
getwde()
getwd()
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
combinedout <- readRDS("intmd/Combined_outputs_2025-02-21.rds")
pp <- getDefaultPlotParams(1)
meta_cohort <- readRDS("intmd/Analysis_meta.rds")
invisible(list2env(meta_cohort,environment()))
combinedout$wgs_call$patA
combinedout$wgs_call$patA$eventType %>% unique()
library(dplyr)
source("utils/eval.R")
# Load WGS (patA) calls
wgs <- read.delim("pat_comb/segs_consensus_2.tsv", stringsAsFactors = FALSE)
wgs <- wgs %>%
filter(!is.na(cnv_state), cnv_state != "neu") %>%
transmute(seqnames = CHROM, start = seg_start, end = seg_end, cnv = cnv_state)
wgs
# Load CONGASp calls
congasp <- read.delim("congasp/cnv_segments_formatted.tsv", stringsAsFactors = FALSE)
# Get unique clusters
clusters <- sort(unique(congasp$cluster))
# Loop through clusters and evaluate
for (cl in clusters) {
cat("\nCluster", cl, ":\n")
congasp_cl <- congasp %>% filter(cluster == cl) %>% select(seqnames, start, end, cnv)
print(eval_call(wgs, congasp_cl, byCNV=TRUE))
}
congasp_cl <- congasp %>% filter(cluster == cl) %>% select(seqnames, start, end, cnv)
congasp_cl
wgs
library(dplyr)
source("utils/eval.R")
# Load WGS (patA) calls
wgs <- read.delim("pat_comb/segs_consensus_2.tsv", stringsAsFactors = FALSE)
wgs <- wgs %>%
filter(!is.na(cnv_state), cnv_state != "neu") %>%
transmute(seqnames = CHROM, start = seg_start,
end = seg_end, cnv = cnv_state) %>%
filter(seqnames=7)
library(dplyr)
source("utils/eval.R")
# Load WGS (patA) calls
wgs <- read.delim("pat_comb/segs_consensus_2.tsv", stringsAsFactors = FALSE)
wgs <- wgs %>%
filter(!is.na(cnv_state), cnv_state != "neu") %>%
transmute(seqnames = CHROM, start = seg_start,
end = seg_end, cnv = cnv_state) %>%
filter(seqnames==7)
# Load CONGASp calls
congasp <- read.delim("congasp/cnv_segments_formatted.tsv", stringsAsFactors = FALSE)
# Get unique clusters
clusters <- sort(unique(congasp$cluster))
# Loop through clusters and evaluate
for (cl in clusters) {
cat("\nCluster", cl, ":\n")
congasp_cl <- congasp %>% filter(cluster == cl) %>%
select(seqnames, start, end, cnv) %>%
mutate(seqnames=gsub("chr","",seqnames))
print(eval_call(wgs, congasp_cl, byCNV=TRUE))
}
numbat_seg <- map(combinedout$numbat_call[[sample]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post) %>%
mutate(chr=paste0("chr",chr)))
numbat_seg <- map(combinedout$numbat_call[["patA"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post))
numbat_seg
numbat_seg <- map(combinedout$numbat_call[["patA"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post) %>%
filter(chr==7))
numbat_seg
map(numbat_seg,\(x) eval_call(wgs, congasp_cl, byCNV=TRUE))
map(numbat_seg,\(x) eval_call(x, congasp_cl, byCNV=TRUE))
map(numbat_seg,\(x) eval_call(wgs, x, byCNV=TRUE))
library(dplyr)
source("utils/eval.R")
# Load WGS (patA) calls
wgs <- read.delim("pat_comb/segs_consensus_2.tsv", stringsAsFactors = FALSE)
wgs <- wgs %>%
filter(!is.na(cnv_state), cnv_state != "neu") %>%
transmute(seqnames = CHROM, start = seg_start,
end = seg_end, cnv = cnv_state) %>%
filter(seqnames==7)
# Load CONGASp calls
congasp <- read.delim("congasp/cnv_segments_formatted.tsv", stringsAsFactors = FALSE)
# Get unique clusters
clusters <- sort(unique(congasp$cluster))
# Loop through clusters and evaluate
for (cl in clusters) {
cat("\nCluster", cl, ":\n")
congasp_cl <- congasp %>% filter(cluster == cl) %>%
select(seqnames, start, end, cnv) %>%
unique() %>%
mutate(seqnames=gsub("chr","",seqnames))
print(eval_call(wgs, congasp_cl, byCNV=TRUE))
}
numbat_seg <- map(combinedout$numbat_call[["patA"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post) %>%
filter(chr==7))
map(numbat_seg,\(x) eval_call(wgs, x, byCNV=TRUE))
DL3267 <- fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv")
head(DL3267)
DL3267 %>%
group_by(seqnames,start,end) %>%
summarise(n=n()) %>% View()
DL3267 %>%
group_by(seqnames,start,end) %>%
summarise(n=n()) %>% filter(n>1) %>% View()
CNV2eval <- map(combinedout$numbat_call[["DL3267"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post))
CNV2eval$epianeufinder <- fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv") %>%
select(-n_cells)
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
wgsCall_gr
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
CNV2eval <- map(combinedout$numbat_call[["DL3267"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post))
CNV2eval$epianeufinder <- fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv") %>%
select(-n_cells)
map(CNV2eval,\(n)eval_call(wgsCall_gr[["DL3267"]],n)) %>%
bind_rows() %>%
mutate(mode = names(CNV2eval))
fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv") %>%
select(-n_cells) %>% head()
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
CNV2eval <- map(combinedout$numbat_call[["DL3267"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post))
CNV2eval$epianeufinder <- fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv") %>%
select(-n_cells) %>%
mutate(gsub("chr","",seqnames))
map(CNV2eval,\(n)eval_call(wgsCall_gr[["DL3267"]],n)) %>%
bind_rows() %>%
mutate(mode = names(CNV2eval))
CNV2eval$epianeufinder
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
CNV2eval <- map(combinedout$numbat_call[["DL3267"]],\(d) d %>%
select(chr=CHROM,start=seg_start,
end=seg_end,
eventType=cnv_state_post))
CNV2eval$epianeufinder <- fread("benchmark/epianeufinder_DL3267_cnv_calls.tsv") %>%
select(-n_cells) %>%
mutate(seqnames=gsub("chr","",seqnames))
map(CNV2eval,\(n)eval_call(wgsCall_gr[["DL3267"]],n)) %>%
bind_rows() %>%
mutate(mode = names(CNV2eval))
library(ggplot2)
library(tidyr)
# Assuming the previous code produces a data frame like this:
pr_df <- map(CNV2eval, \(n) eval_call(wgsCall_gr[["DL3267"]], n)) %>%
bind_rows() %>%
mutate(mode = names(CNV2eval))
# Reshape for plotting
pr_long <- pr_df %>%
select(mode, precision, recall, f1) %>%
pivot_longer(cols = c("precision", "recall", "f1"), names_to = "metric", values_to = "value")
# Plot
ggplot(pr_long, aes(x = mode, y = value, fill = metric)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Precision, Recall, F1 for DL3267", y = "Score", x = "Mode") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
library(patchwork) # install.packages("patchwork") if needed
p_f1 <- ggplot(filter(pr_long, metric == "f1"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "F1 Score", y = "F1", x = "Mode") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p_precision <- ggplot(filter(pr_long, metric == "precision"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "Precision", y = "Precision", x = "Mode") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
p_recall <- ggplot(filter(pr_long, metric == "recall"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "Recall", y = "Recall", x = "Mode") +
theme_minimal() +
scale_fill_brewer(palette = "Set1")
# Combine the three plots
p_f1 / p_precision / p_recall
library(patchwork) # already loaded
p_f1 <- ggplot(filter(pr_long, metric == "f1"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "F1 Score", y = "F1", x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(title = "Mode"))
p_precision <- ggplot(filter(pr_long, metric == "precision"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "Precision", y = "Precision", x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(title = "Mode"))
p_recall <- ggplot(filter(pr_long, metric == "recall"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "Recall", y = "Recall", x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(title = "Mode"))
# Combine the three plots with a shared legend
(p_f1 / p_precision / p_recall) + plot_layout(guides = "collect")
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "benchmark",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
