labs(title = "Precision", y = "Precision", x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(title = "Mode"))
p_recall <- ggplot(filter(pr_long, metric == "recall"), aes(x = mode, y = value, fill = mode)) +
geom_bar(stat = "identity") +
labs(title = "Recall", y = "Recall", x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = "Set1") +
guides(fill = guide_legend(title = "Mode"))
# Combine the three plots with a shared legend
(p_f1 / p_precision / p_recall) + plot_layout(guides = "collect")
source("utils/mini_import.R")
source("utils/vis.R")
pacman::p_load(karyoploteR,
ggplotify,ggplot2,cowplot,
ggpubr)
wgs_df <- fread("intmd/patA_wgs_seg.tsv")
dirs <- fs::dir_ls(path = "benchmark",
regexp = "patA_bin\\d+kb_outputs$",
type = "directory")
numbat_segL <- dirs %>%
set_names(~stringr::str_extract(.x, "bin\\d+kb")) %>%
map(~{
file_path <- file.path(.x, "segs_consensus_2.tsv")
if (file.exists(file_path)) {
readr::read_tsv(file_path, show_col_types = FALSE) %>%
select(chr = CHROM, start = seg_start, end = seg_end,
eventType = cnv_state_post) %>%
mutate(chr = paste0("chr", chr))
} else {
NULL
}
}) %>%
compact()
ords <- paste0("bin",c(50,80,100,200,300,500),"kb")
segD <- c(list("WGS"=wgs_df),numbat_segL[ords])
chrLen <- numbat::chrom_sizes_hg38$size %>%
setNames(paste0("chr",numbat::chrom_sizes_hg38$CHROM))
pp <- getDefaultPlotParams(1)
pp$data2height <- 50
karyo_cnv <- as.ggplot(expression(
kp <- plotKaryotype(plot.type=2, chromosomes=c("chr7"),
cex=0.9,
plot.params = pp),
nparts <- names(segD),
for(i in seq_along(nparts)) {
CNV_D <- segD[[i]]
at <- autotrack(i,length(nparts),margin = 0.05)
kpRect(kp, chr=CNV_D$chr,
x0=CNV_D$start,
x1=CNV_D$end,
y0=0.1, y1=0.85,
border="black",
lty=1, lwd=0.5,
r0=at$r0, r1=at$r1,
col=numbat:::cnv_colors[c(CNV_D$eventType)])
kpRect(kp, chr=CNV_D$chr, x0=0, x1=chrLen[CNV_D$chr], y0=0, y1=1)
}))+
theme(plot.margin=unit(c(0,0.03,0,0), "null"))
ypos=0.42
karyo_cnv <- karyo_cnv+
annotate(geom="text",
x=0.04, y=seq(ypos,ypos+0.31,length.out=length(segD)),
label=c("WGS",ords),
size=rel(2.3),
color="black",hjust = 0,fontface="bold")
karyo_cnv
test <- fread("congasp/inputData/DL3267/bin_counts_for_python.csv")
test <- data.table::fread("congasp/inputData/DL3267/bin_counts_for_python.csv")
colnames(test)
rev(colnames(test))
packageVersion('numbat')
library(dplyr)
source("utils/eval.R")
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
setwd("~/numbatm/Numbat-multiome_Analysis/")
source("utils/mini_import.R")
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) w[,c("seqnames","start","end")])
congasp <- read.delim("congasp/cnv_segments_formatted.tsv",
stringsAsFactors = FALSE)
clusters <- sort(unique(congasp$cluster))
# Loop through clusters and evaluate
for (cl in clusters) {
cat("\nCluster", cl, ":\n")
congasp_cl <- congasp %>% filter(cluster == cl) %>%
select(seqnames, start, end, cnv) %>%
unique() %>%
mutate(seqnames=gsub("chr","",seqnames))
print(eval_call(wgsCall_gr$pM11004, congasp_cl, byCNV=TRUE))
}
clusters
congasp <- read.delim("congasp/cnv_segments_formatted.tsv",
stringsAsFactors = FALSE)
head(congasp)
unique(congasp$cluster)
congasp_cl <- congasp %>% filter(cluster == cl) %>%
select(seqnames, start, end, cnv) %>%
unique() %>%
mutate(seqnames=gsub("chr","",seqnames))
congasp_cl
wgsCall_gr$pM11004
eval_call(wgsCall_gr$pM11004, congasp_cl, byCNV=TRUE)
wgs_call$pM10114
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) distinct(w[,c("seqnames","start","end","eventType")]))
congasp <- read.delim("congasp/cnv_segments_formatted.tsv",
stringsAsFactors = FALSE)
clusters <- sort(unique(congasp$cluster))
# Loop through clusters and evaluate
for (cl in clusters) {
cat("\nCluster", cl, ":\n")
congasp_cl <- congasp %>% filter(cluster == cl) %>%
select(seqnames, start, end, cnv) %>%
unique() %>%
mutate(seqnames=gsub("chr","",seqnames))
print(eval_call(wgsCall_gr$pM11004, congasp_cl, byCNV=TRUE))
}
wgsCall_gr$pM10114
wgsCall_gr$pM11004
View(wgsCall_gr$pM11004)
View(congasp_cl)
table(congasp_cl$seqnames)
table(congasp_cl$seqnames) %>% sort()
# Extract barcodes from bin_counts_for_python.csv in each subfolder of congasp/inputData
# For patA: exclude barcodes containing 'NIH'
# For others: exclude barcodes containing 'GEX'
# Output: congasp/tmp_CB/<subfolder>_CB.txt (one barcode per line, no header)
input_dir <- "congasp/inputData"
out_dir <- "congasp/tmp_CB"
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
subfolders <- list.dirs(input_dir, full.names = FALSE, recursive = FALSE)
for (sub in subfolders) {
csv_path <- file.path(input_dir, sub, "bin_counts_for_python.csv")
if (!file.exists(csv_path)) next
# Read only the header (first line)
header <- readLines(csv_path, n = 1)
# Remove any leading/trailing whitespace
header <- trimws(header)
# Split by comma
barcodes <- unlist(strsplit(header, ","))
# Remove empty strings
barcodes <- barcodes[barcodes != ""]
# Filtering
if (sub == "patA") {
keep <- !grepl("NIH", barcodes)
} else {
keep <- !grepl("GEX", barcodes)
}
filtered_barcodes <- barcodes[keep]
# Write to file
out_file <- file.path(out_dir, paste0(sub, "_CB.txt"))
writeLines(filtered_barcodes, out_file)
}
cat("Done. Output written to", out_dir, "\n")
library(stringr)
# List all *_cnv_segments_formatted.tsv files in congasp/cnv_congasp
cnv_files <- list.files('congasp/cnv_congasp', pattern = '_cnv_segments_formatted.tsv$', full.names = TRUE)
# Prepare results list
glob_pr_results <- list()
for (f in cnv_files) {
# Extract sample name from filename
sample <- str_replace(basename(f), '_cnv_segments_formatted.tsv', '')
# Read the file
dat <- read.delim(f, stringsAsFactors = FALSE)
# Standardize columns for eval_call
dat <- dat %>% select(seqnames, start, end, cnv) %>% mutate(seqnames = gsub('chr', '', seqnames))
# Check if sample exists in wgsCall_gr
if (!sample %in% names(wgsCall_gr)) {
warning(paste('Sample', sample, 'not found in wgsCall_gr, skipping.'))
next
}
# Evaluate
pr <- eval_call(wgsCall_gr[[sample]], dat, byCNV = TRUE)
pr$sample <- sample
glob_pr_results[[sample]] <- pr
}
library(dplyr)
source("utils/eval.R")
source("utils/eval.R")
source("utils/mini_import.R")
library(stringr)
# List all *_cnv_segments_formatted.tsv files in congasp/cnv_congasp
cnv_files <- list.files('congasp/cnv_congasp', pattern = '_cnv_segments_formatted.tsv$', full.names = TRUE)
# Prepare results list
glob_pr_results <- list()
for (f in cnv_files) {
# Extract sample name from filename
sample <- str_replace(basename(f), '_cnv_segments_formatted.tsv', '')
# Read the file
dat <- read.delim(f, stringsAsFactors = FALSE)
# Standardize columns for eval_call
dat <- dat %>% select(seqnames, start, end, cnv) %>% mutate(seqnames = gsub('chr', '', seqnames))
# Check if sample exists in wgsCall_gr
if (!sample %in% names(wgsCall_gr)) {
warning(paste('Sample', sample, 'not found in wgsCall_gr, skipping.'))
next
}
# Evaluate
pr <- eval_call(wgsCall_gr[[sample]], dat, byCNV = TRUE)
pr$sample <- sample
glob_pr_results[[sample]] <- pr
}
invisible(list2env(readRDS("intmd/Combined_outputs_2025-02-21.rds"),environment()))
wgsCall_gr <- map(wgs_call,\(w) distinct(w[,c("seqnames","start","end","eventType")]))
# List all *_cnv_segments_formatted.tsv files in congasp/cnv_congasp
cnv_files <- list.files('congasp/cnv_congasp', pattern = '_cnv_segments_formatted.tsv$', full.names = TRUE)
# Prepare results list
glob_pr_results <- list()
for (f in cnv_files) {
# Extract sample name from filename
sample <- str_replace(basename(f), '_cnv_segments_formatted.tsv', '')
# Read the file
dat <- read.delim(f, stringsAsFactors = FALSE)
# Standardize columns for eval_call
dat <- dat %>% select(seqnames, start, end, cnv) %>% mutate(seqnames = gsub('chr', '', seqnames))
# Check if sample exists in wgsCall_gr
if (!sample %in% names(wgsCall_gr)) {
warning(paste('Sample', sample, 'not found in wgsCall_gr, skipping.'))
next
}
# Evaluate
pr <- eval_call(wgsCall_gr[[sample]], dat, byCNV = TRUE)
pr$sample <- sample
glob_pr_results[[sample]] <- pr
}
# Combine all results
glob_pr_df <- bind_rows(glob_pr_results)
# Reshape for plotting
library(tidyr)
glob_pr_long <- glob_pr_df %>%
select(sample, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'), names_to = 'metric', values_to = 'value')
# Plot
library(ggplot2)
ggplot(glob_pr_long, aes(x = sample, y = value, fill = metric)) +
geom_bar(stat = 'identity', position = 'dodge') +
facet_wrap(~cnv) +
labs(title = 'Precision, Recall, F1 for each sample (by CNV type)', y = 'Score', x = 'Sample') +
theme_minimal() +
scale_fill_brewer(palette = 'Set1')
combinedout$numbat_call[["DL3267"]]
numbat_call
library(patchwork)
p_f1 <- ggplot(filter(glob_pr_long, metric == "f1"), aes(x = sample, y = value, fill = cnv)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'F1 Score', y = 'F1', x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
guides(fill = guide_legend(title = 'CNV'))
p_precision <- ggplot(filter(glob_pr_long, metric == "precision"), aes(x = sample, y = value, fill = cnv)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Precision', y = 'Precision', x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
guides(fill = guide_legend(title = 'CNV'))
p_recall <- ggplot(filter(glob_pr_long, metric == "recall"), aes(x = sample, y = value, fill = cnv)) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(title = 'Recall', y = 'Recall', x = NULL) +
theme_minimal() +
scale_fill_brewer(palette = 'Set1') +
guides(fill = guide_legend(title = 'CNV'))
(p_f1 / p_precision / p_recall) + plot_layout(guides = 'collect')
congasp_pM10114 <- read.delim('congasp/cnv_congasp/pM10114_cnv_segments_formatted.tsv', stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv) %>%
mutate(seqnames = gsub('chr', '', seqnames))
# Extract numbat comb_bincnt for pM10114
numbat_comb <- combinedout$numbat_call[["pM10114"]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end, cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
numbat_seg <- map($numbat_call[["patA"]],\(d) d %>%
congasp_pM10114 <- read.delim('congasp/cnv_congasp/pM10114_cnv_segments_formatted.tsv',
stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv) %>%
mutate(seqnames = gsub('chr', '', seqnames))
# Extract numbat comb_bincnt for pM10114
numbat_comb <- numbat_call[["pM10114"]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end, cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
# Only keep amp/del
for_cnv <- c('amp', 'del')
results_list <- list()
for (this_cnv in for_cnv) {
# Filter
congasp_cnv <- congasp_pM10114 %>% filter(cnv == this_cnv)
numbat_cnv <- numbat_comb %>% filter(cnv == this_cnv)
# Evaluate against WGS
pr_congasp <- eval_call(wgsCall_gr[["pM10114"]], congasp_cnv, byCNV = FALSE)
pr_numbat <- eval_call(wgsCall_gr[["pM10114"]], numbat_cnv, byCNV = FALSE)
# Add method/cnv
pr_congasp$method <- 'CONGASP'; pr_congasp$cnv <- this_cnv
pr_numbat$method <- 'numbat'; pr_numbat$cnv <- this_cnv
results_list[[paste0('congasp_', this_cnv)]] <- pr_congasp
results_list[[paste0('numbat_', this_cnv)]] <- pr_numbat
}
paired_df <- bind_rows(results_list)
paired_long <- paired_df %>%
select(method, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'), names_to = 'metric', values_to = 'value')
# Paired boxplot for each metric and CNV type
library(ggpubr)
ggpaired <- function(df, metric) {
ggpaired(df %>% filter(metric == !!metric),
x = 'method', y = 'value', color = 'method', line.color = 'gray',
facet.by = 'cnv', palette = 'jco', id = NULL) +
labs(title = paste0('Paired ', metric, ' for pM10114: CONGASP vs numbat'),
y = metric, x = NULL) +
theme_minimal()
}
ggpaired(paired_long, 'f1')
paired_results <- list()
for (sample in intersect(names(wgsCall_gr), names(numbat_call))) {
# Check if comb_bincnt exists for this sample in numbat_call
if (!"comb_bincnt" %in% names(numbat_call[[sample]])) next
# Try to find the corresponding CONGASP file
congasp_file <- file.path('congasp/cnv_congasp', paste0(sample, '_cnv_segments_formatted.tsv'))
if (!file.exists(congasp_file)) next
# Read and format
congasp_dat <- read.delim(congasp_file, stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv) %>%
mutate(seqnames = gsub('chr', '', seqnames))
numbat_dat <- numbat_call[[sample]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end, cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
for (this_cnv in c('amp', 'del')) {
congasp_cnv <- congasp_dat %>% filter(cnv == this_cnv)
numbat_cnv <- numbat_dat %>% filter(cnv == this_cnv)
pr_congasp <- eval_call(wgsCall_gr[[sample]], congasp_cnv, byCNV = FALSE)
pr_numbat <- eval_call(wgsCall_gr[[sample]], numbat_cnv, byCNV = FALSE)
pr_congasp$method <- 'CONGASP'; pr_congasp$cnv <- this_cnv; pr_congasp$sample <- sample
pr_numbat$method <- 'numbat'; pr_numbat$cnv <- this_cnv; pr_numbat$sample <- sample
paired_results[[paste0(sample, '_', this_cnv, '_congasp')]] <- pr_congasp
paired_results[[paste0(sample, '_', this_cnv, '_numbat')]] <- pr_numbat
}
}
paired_all_df <- bind_rows(paired_results)
paired_all_long <- paired_all_df %>%
select(sample, method, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'), names_to = 'metric', values_to = 'value')
# Plot: paired lines for each sample, by metric and CNV type
library(ggplot2)
library(dplyr)
for (met in c('f1', 'precision', 'recall')) {
p <- paired_all_long %>% filter(metric == met) %>%
ggplot(aes(x = method, y = value, group = sample, color = sample)) +
geom_point(size = 2) +
geom_line() +
facet_wrap(~cnv) +
labs(title = paste('Paired', toupper(met), 'for all samples: CONGASP vs numbat'),
y = toupper(met), x = NULL) +
theme_minimal() +
theme(legend.position = 'none')
print(p)
}
paired_results <- list()
for (sample in intersect(names(wgsCall_gr), names(numbat_call))) {
if (!"comb_bincnt" %in% names(numbat_call[[sample]])) next
congasp_file <- file.path('congasp/cnv_congasp',
paste0(sample, '_cnv_segments_formatted.tsv'))
if (!file.exists(congasp_file)) next
congasp_dat <- read.delim(congasp_file, stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv) %>%
mutate(seqnames = gsub('chr', '', seqnames))
numbat_dat <- numbat_call[[sample]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end,
cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
# Evaluate byCNV=TRUE for both methods
pr_congasp <- eval_call(wgsCall_gr[[sample]], congasp_dat, byCNV = TRUE) %>%
filter(cnv %in% c('amp','del'))
pr_numbat <- eval_call(wgsCall_gr[[sample]], numbat_dat, byCNV = TRUE) %>%
filter(cnv %in% c('amp','del'))
pr_congasp$method <- 'CONGASP'; pr_congasp$sample <- sample
pr_numbat$method <- 'numbat'; pr_numbat$sample <- sample
paired_results[[paste0(sample, '_congasp')]] <- pr_congasp
paired_results[[paste0(sample, '_numbat')]] <- pr_numbat
}
paired_all_df <- bind_rows(paired_results)
paired_all_long <- paired_all_df %>%
select(sample, method, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'),
names_to = 'metric', values_to = 'value')
# Plot: paired lines for each sample, by metric and CNV type
library(ggplot2)
library(dplyr)
for (met in c('f1', 'precision', 'recall')) {
p <- paired_all_long %>% filter(metric == met) %>%
ggplot(aes(x = method, y = value, group = sample, color = sample)) +
geom_point(size = 2) +
geom_line() +
facet_wrap(~cnv) +
labs(title = paste('Paired', toupper(met), 'for all samples: CONGASP vs numbat'),
y = toupper(met), x = NULL) +
theme_minimal() +
theme(legend.position = 'none')
print(p)
}
congasp_dat <- read.delim(congasp_file, stringsAsFactors = FALSE)
head(congasp_dat)
paired_results <- list()
for (sample in intersect(names(wgsCall_gr), names(numbat_call))) {
if (!"comb_bincnt" %in% names(numbat_call[[sample]])) next
congasp_file <- file.path('congasp/cnv_congasp',
paste0(sample, '_cnv_segments_formatted.tsv'))
if (!file.exists(congasp_file)) next
congasp_dat <- read.delim(congasp_file, stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv, cluster) %>%
mutate(seqnames = gsub('chr', '', seqnames))
numbat_dat <- numbat_call[[sample]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end,
cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
# Evaluate byCNV=TRUE for numbat
pr_numbat <- eval_call(wgsCall_gr[[sample]], numbat_dat, byCNV = TRUE) %>%
filter(cnv %in% c('amp','del'))
pr_numbat$method <- 'numbat'; pr_numbat$sample <- sample
# For CONGASP: evaluate per cluster, take max for each metric and cnv
pr_congasp_all <- lapply(split(congasp_dat, congasp_dat$cluster), function(df) {
eval_call(wgsCall_gr[[sample]], df %>% select(seqnames, start, end, cnv), byCNV = TRUE)
})
pr_congasp_all <- bind_rows(pr_congasp_all) %>% filter(cnv %in% c('amp','del'))
# For each cnv type, take max for each metric
pr_congasp_max <- pr_congasp_all %>%
group_by(cnv) %>%
summarise(precision = max(precision, na.rm=TRUE),
recall = max(recall, na.rm=TRUE),
f1 = max(f1, na.rm=TRUE)) %>%
ungroup()
pr_congasp_max$method <- 'CONGASP'; pr_congasp_max$sample <- sample
paired_results[[paste0(sample, '_congasp')]] <- pr_congasp_max
paired_results[[paste0(sample, '_numbat')]] <- pr_numbat
}
paired_all_df <- bind_rows(paired_results)
paired_all_long <- paired_all_df %>%
select(sample, method, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'),
names_to = 'metric', values_to = 'value')
# Plot: paired lines for each sample, by metric and CNV type
library(ggplot2)
library(dplyr)
for (met in c('f1', 'precision', 'recall')) {
p <- paired_all_long %>% filter(metric == met) %>%
ggplot(aes(x = method, y = value, group = sample, color = sample)) +
geom_point(size = 2) +
geom_line() +
facet_wrap(~cnv) +
labs(title = paste('Paired', toupper(met), 'for all samples: CONGASP (max cluster) vs numbat'),
y = toupper(met), x = NULL) +
theme_minimal() +
theme(legend.position = 'none')
print(p)
}
paired_results <- list()
for (sample in intersect(names(wgsCall_gr), names(numbat_call))) {
if (!"comb_bincnt" %in% names(numbat_call[[sample]])) next
congasp_file <- file.path('congasp/cnv_congasp',
paste0(sample, '_cnv_segments_formatted.tsv'))
if (!file.exists(congasp_file)) next
congasp_dat <- read.delim(congasp_file, stringsAsFactors = FALSE) %>%
select(seqnames, start, end, cnv, cluster) %>%
mutate(seqnames = gsub('chr', '', seqnames))
numbat_dat <- numbat_call[[sample]][["comb_bincnt"]] %>%
select(seqnames = CHROM, start = seg_start, end = seg_end,
cnv = cnv_state_post) %>%
mutate(seqnames = as.character(seqnames))
# Evaluate byCNV=TRUE for numbat
pr_numbat <- eval_call(wgsCall_gr[[sample]], numbat_dat, byCNV = TRUE) %>%
filter(cnv %in% c('amp','del'))
pr_numbat$method <- 'Numbat-multiome\nCombined Bin'; pr_numbat$sample <- sample
# For CONGASP: evaluate per cluster, take max for each metric and cnv
pr_congasp_all <- lapply(split(congasp_dat, congasp_dat$cluster), function(df) {
eval_call(wgsCall_gr[[sample]], df %>% select(seqnames, start, end, cnv), byCNV = TRUE)
})
pr_congasp_all <- bind_rows(pr_congasp_all) %>% filter(cnv %in% c('amp','del'))
# For each cnv type, take max for each metric
pr_congasp_max <- pr_congasp_all %>%
group_by(cnv) %>%
summarise(precision = max(precision, na.rm=TRUE),
recall = max(recall, na.rm=TRUE),
f1 = max(f1, na.rm=TRUE)) %>%
ungroup()
pr_congasp_max$method <- 'CONGAS+'; pr_congasp_max$sample <- sample
paired_results[[paste0(sample, '_congasp')]] <- pr_congasp_max
paired_results[[paste0(sample, '_numbat')]] <- pr_numbat
}
paired_all_df <- bind_rows(paired_results)
paired_all_long <- paired_all_df %>%
select(sample, method, cnv, precision, recall, f1) %>%
pivot_longer(cols = c('precision', 'recall', 'f1'),
names_to = 'metric', values_to = 'value')
# Plot: paired lines for each sample, by metric and CNV type, with boxplots
library(ggplot2)
library(dplyr)
for (met in c('f1', 'precision', 'recall')) {
p <- paired_all_long %>% filter(metric == met) %>%
ggplot(aes(x = method, y = value, group = sample, color = sample)) +
geom_boxplot(aes(group = method), width = 0.5, fill = 'gray90',
color = 'black', alpha = 0.4, outlier.shape = NA) +
geom_point(size = 2) +
geom_line() +
facet_wrap(~cnv) +
labs(title = paste('Paired', toupper(met),
'for all samples: CONGAS+ vs Numbat-multiome Combined Bin'),
y = toupper(met), x = NULL) +
theme_minimal() +
theme(legend.position = 'none')
print(p)
}
